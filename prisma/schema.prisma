generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}

model User {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String    @default("NO_NAME")
  email            String    @unique(map: "user_email_idx")
  emailVerified    DateTime? @db.Timestamp(6)
  image            String?
  password         String?
  role             String    @default("user")
  address          Json?     @db.Json
  paymentMethod    String?
  createdAt        DateTime  @default(now()) @db.Timestamp(6)
  updatedAt        DateTime  @updatedAt
  account          Account[]
  session          Session[]
  Cart             Cart[]
  Order            Order[]
  resetToken       String?   @unique
  resetTokenExpiry DateTime?
}

model VerificationToken {
  id      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email   String
  token   String   @unique
  expires DateTime @db.Timestamp(6)
}

enum ProductType {
  MATTRESS
  PILLOW
  QUILT
  PAD
  bundle
  BED
}

enum Size {
  SIZE_80_190
  SIZE_80_200
  SIZE_90_190
  SIZE_90_200
  SIZE_100_190
  SIZE_100_200
  SIZE_110_190
  SIZE_110_200
  SIZE_120_190
  SIZE_120_200
  SIZE_130_190
  SIZE_130_200
  SIZE_140_190
  SIZE_140_200
  SIZE_150_190
  SIZE_150_200
  SIZE_160_190
  SIZE_160_200
  SIZE_170_190
  SIZE_170_200
  SIZE_180_190
  SIZE_180_200
  SIZE_190_190
  SIZE_190_200
  SIZE_200_200
}

model Product {
  id       String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title    String
  titleEn  String
  category ProductType
  images   String[]

  brand         String
  description   String
  descriptionEn String
  tbilisi       Boolean @default(false)
  batumi        Boolean @default(false)
  qutaisi       Boolean @default(false)

  popular Boolean @default(false)
  sales   Int?    @default(0)

  createdAt DateTime      @default(now()) @db.Timestamp(6)
  OrderItem OrderItem[]
  sizes     ProductSize[]
}

model ProductSize {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId String  @db.Uuid
  size      Size
  price     Decimal @db.Decimal(12, 2)

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, size])
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Cart {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String?  @db.Uuid
  sessionCartId String
  items         Json[]   @default([]) @db.Json
  itemsPrice    Decimal  @db.Decimal(12, 2)
  totalPrice    Decimal  @db.Decimal(12, 2)
  shippingPrice Decimal  @db.Decimal(12, 2)
  taxPrice      Decimal  @db.Decimal(12, 2)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String      @db.Uuid
  shippingAddress Json        @db.Json
  paymentMethod   String
  paymentResult   Json?       @db.Json
  itemsPrice      Decimal     @db.Decimal(12, 2)
  shippingPrice   Decimal     @db.Decimal(12, 2)
  taxPrice        Decimal     @db.Decimal(12, 2)
  totalPrice      Decimal     @db.Decimal(12, 2)
  isPaid          Boolean     @default(false)
  paidAt          DateTime?   @db.Timestamp(6)
  isDelivered     Boolean     @default(false)
  deliveredAt     DateTime?   @db.Timestamp(6)
  createdAt       DateTime    @default(now()) @db.Timestamp(6)
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderitems      OrderItem[]
}

model OrderItem {
  orderId   String  @db.Uuid
  productId String  @db.Uuid
  qty       Int
  price     Decimal @db.Decimal(12, 2)
  title     String

  image   String
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([orderId, productId], map: "orderitems_orderId_productId_pk")
}


